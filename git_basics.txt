
REPOSITORY AND REMOTE CREATION :-

        1) Login to github
        2) Create a repo
        3) copy the https or ssh link
        4) cd into the directory from which you want to create the repo
        5) create the repo by this command " git clone <web-site-link-of-the-repo> " 
        6) create a file with an extension and with contains in it inside the repo folder that is created just now by cloneing
        7) add the file after finising writing it by " git add <file-name> " or best will the to use "git add ." cause git doesn't like to apply changes for small things
        8) commit the file through this command "git commit -m <"commit-message">  <file-name>" or to push multiple file replace the file name with "--all"

          [ Note :- If the "commit-message" is not giveen the Nano editor will open,
           nothing to afraid just enter the message int the editor then
           press ctrl+x then an option will pop up asking you to save the buffer
           press y then press "Enter" to exit. ]

        9) after that to push the code into github use the command "git push <remote-name> <branch-name>" or just "git push"
	  
	  [ Note :- A remote in github is the clone of the local repository i.e. "repo" of your computer
	   present in the github server and branch a pointer to the set of files present in the remote 
	   that get's colned in the same repo to add some feture into them and latter get's merged into "master" branch 
	   to check remote name the command "git remote show" can be used and to check brach name "git branch" can be used ]

	  [ Note :- For the first commit the command "git push <remote-name> <branch-name> must ne used ]
		
        10) check git hub website if the code is pushed or not .

	11) if this is giving problems then it's because of https and ssh then  use vsode's source control to initialize the repo 

UPDATING THE REPOSITORY FROM THE REMOTE:-
	
	1) use command "git pull <remote-name> <branch-name>
        	
	OR,
	
	1) the command "git fetch <remote-name>" 
	2) then "git merge <remote-name>/<branch-name>" can be used to do the same 

BRANCH COLNING OF A REPO AND MERGING AND SWITCHING  :-


 Doing changes in main/master branch :-

	1) clone the remote
	2) add feature 
	3) commit the changes using the 'git commit ' or 'git commit -m 'commit-msg' ' (In case of git commit nano would open if it's selected as the defualt editor) 
	3) and push # like this cloned branch would get updated with new feature

 creating a new branch :- # Preferd way of pushing commits as main/master branch should be the bug free branch 

	1) clone the repo
	2) look at the branch or branches using 'git brach' command
	3) creat a branch using command 'git branch "new branch name" '
	4) push the new branch into the repo 
	5) let the admin handle the merging ....

 Switching the branch :-

	1) use 'git branch' to list branches
	2) use 'git branch new-branch-name' to create a branch
	3) use 'git checkout new-brach-name' to switch the branch
	4) use 'git checkout -b new-branch-name' to both create and switch the branch

 Deleting a branch :-

	1) change the HEAD into main from the current branch from the branch that is to be deleted
	2) use 'git branch -d "new-branch-name " ' to delete it

 Generating a graph of commit history :- # That helps track of commits made to avoid merge conflicts 

	1) git log --graph --online # The graph would only generate the graph of the changes made by commits .... if something is pushed then the graph won't work

  Merging the code :- # Pro tip let someone else to merge the branches 

	1) use ' git checkout main or master ' to shift the HEAD pointer to the brach to merge with
	2) use ' git merge name-of-the-branch-to-be-merged-with-main-or-master-branch ' 
	3) to push mergeal into remote commit it 


DELETAION OF A FILE IN A BRANCH :-

	1) clone the repo if not.
	2) use command "git rm <file-name>"
	3) commit, push the changes.



